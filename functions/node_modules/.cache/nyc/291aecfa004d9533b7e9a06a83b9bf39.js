var cov_1dj48raysm=function(){var path="/home/kaztoozs/Documents/Projects/CallDeskTest/functions/weather.js",hash="634402959d2cb6f1ce0dfbae6a8595e52cbc6d9f",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/kaztoozs/Documents/Projects/CallDeskTest/functions/weather.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:28}},"1":{start:{line:3,column:13},end:{line:3,column:41}},"2":{start:{line:4,column:18},end:{line:4,column:51}},"3":{start:{line:13,column:0},end:{line:51,column:2}},"4":{start:{line:15,column:4},end:{line:49,column:7}},"5":{start:{line:17,column:19},end:{line:18,column:72}},"6":{start:{line:22,column:6},end:{line:48,column:9}},"7":{start:{line:23,column:19},end:{line:23,column:21}},"8":{start:{line:24,column:8},end:{line:24,column:47}},"9":{start:{line:24,column:33},end:{line:24,column:43}},"10":{start:{line:25,column:8},end:{line:43,column:11}},"11":{start:{line:27,column:27},end:{line:27,column:43}},"12":{start:{line:28,column:27},end:{line:28,column:51}},"13":{start:{line:29,column:27},end:{line:29,column:51}},"14":{start:{line:30,column:29},end:{line:30,column:63}},"15":{start:{line:31,column:36},end:{line:31,column:67}},"16":{start:{line:34,column:25},end:{line:38,column:26}},"17":{start:{line:42,column:10},end:{line:42,column:26}},"18":{start:{line:44,column:8},end:{line:47,column:11}},"19":{start:{line:46,column:10},end:{line:46,column:19}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:2},end:{line:14,column:3}},loc:{start:{line:14,column:29},end:{line:50,column:3}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:23},end:{line:15,column:24}},loc:{start:{line:15,column:44},end:{line:49,column:5}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:22,column:31},end:{line:22,column:32}},loc:{start:{line:22,column:41},end:{line:48,column:7}},line:22},"3":{name:"(anonymous_3)",decl:{start:{line:24,column:24},end:{line:24,column:25}},loc:{start:{line:24,column:31},end:{line:24,column:45}},line:24},"4":{name:"(anonymous_4)",decl:{start:{line:25,column:23},end:{line:25,column:24}},loc:{start:{line:25,column:29},end:{line:43,column:9}},line:25},"5":{name:"(anonymous_5)",decl:{start:{line:44,column:25},end:{line:44,column:26}},loc:{start:{line:44,column:31},end:{line:47,column:9}},line:44}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{},_coverageSchema:"d34fc3e6b8297bcde183f5492bcb8fcb36775295"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const http=(cov_1dj48raysm.s[0]++,require('http'));const host=(cov_1dj48raysm.s[1]++,'api.worldweatheronline.com');const wwoApiKey=(cov_1dj48raysm.s[2]++,'96787bdca10e476b92b132115180209');/**
  * Calls the API for weather forecast
  * @param {string} city city we want the forecast for
  * @param {string} date date we want the forecast for
  * @returns {Promise} with weather output
  */cov_1dj48raysm.s[3]++;module.exports={callWeatherApi(city,date){cov_1dj48raysm.f[0]++;cov_1dj48raysm.s[4]++;return new Promise((resolve,reject)=>{cov_1dj48raysm.f[1]++;// Create the path for the HTTP request to get the weather
const path=(cov_1dj48raysm.s[5]++,`${'/premium/v1/weather.ashx?format=json&num_of_days=1'+'&q='}${encodeURIComponent(city)}&key=${wwoApiKey}&date=${date}`);// console.log(`API Request: ${host}${path}`);
// Make the HTTP request to get the weather
cov_1dj48raysm.s[6]++;http.get({host,path},resp=>{cov_1dj48raysm.f[2]++;let body=(cov_1dj48raysm.s[7]++,'');// var to store the response chunks
cov_1dj48raysm.s[8]++;resp.on('data',d=>{cov_1dj48raysm.f[3]++;cov_1dj48raysm.s[9]++;body+=d;});// store each response chunk
cov_1dj48raysm.s[10]++;resp.on('end',()=>{cov_1dj48raysm.f[4]++;// After all the data has been received parse the JSON for desired data
const response=(cov_1dj48raysm.s[11]++,JSON.parse(body));const forecast=(cov_1dj48raysm.s[12]++,response.data.weather[0]);const location=(cov_1dj48raysm.s[13]++,response.data.request[0]);const conditions=(cov_1dj48raysm.s[14]++,response.data.current_condition[0]);const currentConditions=(cov_1dj48raysm.s[15]++,conditions.weatherDesc[0].value);// Create response
const output=(cov_1dj48raysm.s[16]++,`Current conditions in the ${location.type}
        ${location.query} are ${currentConditions} with a projected high of
        ${forecast.maxtempC}째C or ${forecast.maxtempF}째F and a low of
        ${forecast.mintempC}째C or ${forecast.mintempF}째F on
        ${forecast.date}.`);// Resolve the promise with the output text
// console.log(output);
cov_1dj48raysm.s[17]++;resolve(output);});cov_1dj48raysm.s[18]++;resp.on('error',()=>{cov_1dj48raysm.f[5]++;cov_1dj48raysm.s[19]++;// console.log(`Error calling the weather API: ${error}`);
reject();});});});}};